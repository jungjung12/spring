package com.kh.spring.board.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.session.RowBounds;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.kh.spring.board.model.service.BoardService;
import com.kh.spring.board.model.vo.Board;
import com.kh.spring.common.model.vo.PageInfo;
import com.kh.spring.common.templete.PageTemplete;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Controller
@RequiredArgsConstructor
@Slf4j
public class BoardController {

	private final BoardService boardService;
	
	@GetMapping("boardList")
	public String forwording(@RequestParam(value="page", defaultValue="1") int page, Model model) {
		
		//페이징 처리
		
		int listCount;	// 게시판의 총 게시글 수
		int currentPage;	// 현재 페이지(사용자가 요청한 페이지) -> 앞에서 넘길 것
		int pageLimit;	// 페이지 하단에 보여질 페이징 바의 최대 갯수 -> 10개로 고정
		int boardLimit;	// 현 페이지에 보여질 게시글의 최대 개수 -> 10개로 고정
		
		int maxPage;	// 가장 마지막 페이지가 몇 번 페이지인지(페이지의 총 개수)
		int startPage;	// 페이지 하단에 보여질 페이징 바의 시작 수
		int endPage;	// 페이지 하단에 보여질 페이징 바의 마지막 수
		
		// *listCount : 총 게시글 수
		listCount = boardService.boardCount();
		
		// currentPage : 현재 페이지(사용자가 요청한 페이지)
		currentPage = page;
		
		log.info("게시글 수 : {}", listCount, currentPage);
		
		// pageLimit : 페이지 하단에 보여질 페이징 바의 최대 갯수
		pageLimit = 10;
		
		// boardLimit : 현 페이지에 보여질 게시글의 최대 개수
		boardLimit = 10;
		
		// maxPage : 가장 마지막 페이지가 몇 번 페이지인지
		/*
		 * listCount를 double로 변환 -> double 과 int 의 연산은 불가능하므로 int가 double로 형 변환이 이루어져 연산 가능
		 * 
		 * */
		maxPage = (int)Math.ceil((double)listCount/ boardLimit);
		
		// startPage 공식
		/*currentPage, pageLimit에 영향을 받음
		 * 
		 * startPage = n * pageLimit + 1
		 * 
		 * n = (currentPage - 1) / pageLimit
		 * 
		 * startPage = (currentPage - 1) * pageLimit + 1
		 * 
		 * */
		startPage = (currentPage - 1) * pageLimit + 1;
		
		// endPage 공식
		/*startPage, pageLimit에 영향을 받음(maxPage도 영향을 줌)
		 * 
		 * endPage = startPage + pageLimit - 1
		 * 
		 * */
		
		endPage = startPage + pageLimit - 1;
		
		if(endPage>maxPage) endPage = maxPage;
		/* @AllArgsConstructor만 사용
		 * PageInfo pageInfo = new
		 * PageInfo(listCount,currentPage,pageLimit,boardLimit,maxPage,startPage,endPage
		 * );
		 */
		
		//@AllArgsConstructor + @Builder 함께 사용 -> 실무에서 많이 사용하는 디자인 패턴
		PageInfo pageInfo = PageInfo.builder()
									.listCount(listCount)
									.currentPage(currentPage)
									.pageLimit(pageLimit)
									.boardLimit(boardLimit)
									.maxPage(maxPage)
									.startPage(startPage)
									.endPage(endPage)
									.build();
		
		Map<String, Integer> map = new HashMap();
		
		int startValue = (currentPage - 1) * pageLimit + 1;
		int endValue = startPage + pageLimit - 1;
		
		map.put("startValue", startValue);
		map.put("endValue", endValue);
		
		List<Board> boardList = boardService.findAll(map);
		
		// log.info("조회 된 게시글 개수 : {}", boardList.size());
		// log.info("조회 된 게시글 목록 : {}", boardList);
		
		model.addAttribute("list", boardList);
		model.addAttribute("pageInfo", pageInfo);
		
		return "board/list";
	}
	
	@GetMapping("search.do")
	public String search(String condition, String keyword, @RequestParam(value="page", defaultValue="1") int page, Model model) {
		
		//log.info("입력한 키워드 : {}", keyword);	//예측 불가능한 경우의 수
		//log.info("검색 조건 : {}" ,condition);		//예측 가능한 경우의 수
		
		//사용자가 선택한 조건과 입력한 키워드를 가지고 페이징 처리를 끝낸 후 결과를 들고가야 함
		
		Map<String, String> map = new HashMap();
		map.put("condition", condition);
		map.put("keyword", keyword);
		
		int searchCount = boardService.searchCount(map);
		//log.info("개수 : {}", searchCount);
		int currentPage = page;
		int pageLimit = 3;
		int boardLimit = 3;
		
		/*
		 * int maxPage = (int)Math.ceil((double)listCount/ boardLimit); int startValue =
		 * (currentPage - 1) * pageLimit + 1; int endValue = startPage + pageLimit - 1;
		 * if(endPage > maxPage) endPage = maxPage;
		 * 
		 * PageInfo pageInfo = PageInfo.builder() .listCount(listCount)
		 * .currentPage(currentPage) .pageLimit(pageLimit) .boardLimit(boardLimit)
		 * .maxPage(maxPage) .startPage(startPage) .endPage(endPage) .build();
		 */
		
		PageInfo pageInfo = PageTemplete.getPageInfo(searchCount, currentPage, pageLimit, boardLimit);
		
		//Mybatis에서 제공하는 RowBounds
		RowBounds rowBouds = new RowBounds((currentPage -1) * boardLimit,boardLimit);
		
		/*offset, limit 사용
		 * (currentPage - 1) * boardLimit()
		 * */
		
		List<Board> boardList = boardService.findByConditionAndKeyword(map, rowBouds);
		
		model.addAttribute("list", boardList);
		model.addAttribute("pageInfo", pageInfo);
		model.addAttribute("keyword", keyword);
		model.addAttribute("condition", condition);
		
		//log.info("컨디션 : {}", condition);
		
		return "board/list";
		
	}
	
	@GetMapping("boardForm.do")
	public String boardForwording() {
		
		return "board/insertForm";
		
	}
	
	@PostMapping("insert.do")
	public String insert(Board board, MultipartFile upfile) {
		
		log.info("게시글 정보 : {}", board);
		log.info("파일 정보 : {}", upfile);
		
		//첨부파일 존재 여부 확인
		//Multipart는 무조건 생성 -> fileName 필드에 원본명이 들어있는지 여부 확인
		//전달 된 파일이 존재할 경우 => 파일 업로드
		
		
		
		return "redirect:boardForm.do";
	}
	
	
}
